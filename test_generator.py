"""
Script de test pour le g√©n√©rateur de QR codes uniques
Ce script teste toutes les fonctionnalit√©s principales du g√©n√©rateur
"""

import os
import sys
import time
from qr_generator import QRCodeGenerator

def test_basic_generation():
    """Test de la g√©n√©ration de base"""
    print("=== Test 1: G√©n√©ration de base ===")
    
    generator = QRCodeGenerator()
    
    # Test avec UUID
    img, data, filepath = generator.generate_unique_qr(
        base_data="Test basique",
        id_method="uuid",
        custom_prefix="TEST"
    )
    
    assert img is not None, "Image non g√©n√©r√©e"
    assert data is not None, "Donn√©es non g√©n√©r√©es"
    assert filepath is not None, "Chemin de fichier non g√©n√©r√©"
    assert os.path.exists(filepath), "Fichier QR code non cr√©√©"
    
    print(f"‚úì QR code g√©n√©r√©: {os.path.basename(filepath)}")
    print(f"‚úì Donn√©es: {data}")
    print()

def test_all_methods():
    """Test de toutes les m√©thodes de g√©n√©ration d'ID"""
    print("=== Test 2: Toutes les m√©thodes d'ID ===")
    
    generator = QRCodeGenerator()
    methods = ["uuid", "timestamp", "hash", "random"]
    
    results = []
    for method in methods:
        img, data, filepath = generator.generate_unique_qr(
            base_data=f"Test {method}",
            id_method=method,
            custom_prefix="METHOD"
        )
        
        assert img is not None, f"√âchec g√©n√©ration avec m√©thode {method}"
        assert os.path.exists(filepath), f"Fichier non cr√©√© pour m√©thode {method}"
        
        results.append({
            "method": method,
            "data": data,
            "filepath": filepath
        })
        
        print(f"‚úì M√©thode {method.upper()}: {os.path.basename(filepath)}")
    
    print()
    return results

def test_batch_generation():
    """Test de la g√©n√©ration en lot"""
    print("=== Test 3: G√©n√©ration en lot ===")
    
    generator = QRCodeGenerator()
    
    # G√©n√©rer 5 QR codes en lot
    batch_results = generator.generate_batch_qr(
        count=5,
        base_data="Lot test",
        id_method="hash",
        custom_prefix="BATCH"
    )
    
    assert len(batch_results) == 5, "Nombre incorrect de QR codes g√©n√©r√©s"
    
    success_count = 0
    for result in batch_results:
        if result["status"] == "success":
            success_count += 1
            assert os.path.exists(result["filepath"]), f"Fichier manquant: {result['filepath']}"
            print(f"‚úì Lot {result['index']}: {os.path.basename(result['filepath'])}")
        else:
            print(f"‚úó Lot {result['index']}: {result.get('error', 'Erreur inconnue')}")
    
    print(f"‚úì {success_count}/5 QR codes g√©n√©r√©s avec succ√®s")
    print()

def test_uniqueness():
    """Test de v√©rification d'unicit√©"""
    print("=== Test 4: V√©rification d'unicit√© ===")
    
    generator = QRCodeGenerator()
    
    # G√©n√©rer plusieurs QR codes
    for i in range(3):
        generator.generate_unique_qr(
            base_data=f"Unicit√© test {i}",
            id_method="uuid",
            custom_prefix="UNIQUE"
        )
    
    # V√©rifier l'unicit√©
    uniqueness = generator.verify_uniqueness()
    
    print(f"‚úì Total QR codes: {uniqueness['total_codes']}")
    print(f"‚úì IDs uniques: {uniqueness['unique_ids']}")
    print(f"‚úì Doublons: {len(uniqueness['duplicates'])}")
    print(f"‚úì Tous uniques: {'Oui' if uniqueness['is_all_unique'] else 'Non'}")
    
    assert uniqueness['is_all_unique'], "Des doublons ont √©t√© d√©tect√©s!"
    print()

def test_statistics():
    """Test des statistiques"""
    print("=== Test 5: Statistiques ===")
    
    generator = QRCodeGenerator()
    stats = generator.get_statistics()
    
    print(f"‚úì Total g√©n√©r√©s: {stats['total']}")
    print(f"‚úì M√©thodes utilis√©es: {list(stats['methods'].keys())}")
    print(f"‚úì R√©partition: {stats['methods']}")
    print(f"‚úì QR codes r√©cents: {len(stats['recent'])}")
    
    assert stats['total'] > 0, "Aucun QR code dans les statistiques"
    print()

def test_custom_parameters():
    """Test des param√®tres personnalis√©s"""
    print("=== Test 6: Param√®tres personnalis√©s ===")
    
    generator = QRCodeGenerator()
    
    # Test avec param√®tres personnalis√©s
    img, data, filepath = generator.generate_unique_qr(
        base_data="Param√®tres personnalis√©s",
        id_method="random",
        custom_prefix="CUSTOM",
        include_timestamp=False,
        size=15,
        border=2,
        error_correction='H'
    )
    
    assert img is not None, "G√©n√©ration √©chou√©e avec param√®tres personnalis√©s"
    assert os.path.exists(filepath), "Fichier non cr√©√© avec param√®tres personnalis√©s"
    
    print(f"‚úì QR code avec param√®tres personnalis√©s: {os.path.basename(filepath)}")
    print(f"‚úì Donn√©es sans timestamp: {data}")
    print()

def test_edge_cases():
    """Test des cas limites"""
    print("=== Test 7: Cas limites ===")
    
    generator = QRCodeGenerator()
    
    # Test avec donn√©es vides
    img, data, filepath = generator.generate_unique_qr(
        base_data="",
        id_method="uuid"
    )
    
    assert img is not None, "√âchec avec donn√©es vides"
    print("‚úì G√©n√©ration avec donn√©es vides: OK")
    
    # Test avec pr√©fixe vide
    img, data, filepath = generator.generate_unique_qr(
        base_data="Test pr√©fixe vide",
        custom_prefix="",
        id_method="timestamp"
    )
    
    assert img is not None, "√âchec avec pr√©fixe vide"
    print("‚úì G√©n√©ration avec pr√©fixe vide: OK")
    
    # Test avec tous les param√®tres au minimum
    img, data, filepath = generator.generate_unique_qr(
        base_data="Param√®tres min",
        size=5,
        border=1,
        error_correction='L'
    )
    
    assert img is not None, "√âchec avec param√®tres minimums"
    print("‚úì G√©n√©ration avec param√®tres minimums: OK")
    print()

def run_performance_test():
    """Test de performance"""
    print("=== Test 8: Performance ===")
    
    generator = QRCodeGenerator()
    
    # Mesurer le temps de g√©n√©ration
    start_time = time.time()
    
    batch_results = generator.generate_batch_qr(
        count=10,
        base_data="Performance test",
        id_method="uuid"
    )
    
    end_time = time.time()
    generation_time = end_time - start_time
    
    success_count = sum(1 for r in batch_results if r["status"] == "success")
    
    print(f"‚úì 10 QR codes g√©n√©r√©s en {generation_time:.2f} secondes")
    print(f"‚úì Taux de succ√®s: {success_count}/10 ({success_count*10}%)")
    print(f"‚úì Temps moyen par QR code: {generation_time/10:.3f} secondes")
    
    assert success_count == 10, "Tous les QR codes n'ont pas √©t√© g√©n√©r√©s"
    print()

def cleanup_test_files():
    """Nettoyer les fichiers de test"""
    print("=== Nettoyage des fichiers de test ===")
    
    output_dir = "generated_qr"
    if os.path.exists(output_dir):
        files = [f for f in os.listdir(output_dir) if f.endswith('.png')]
        print(f"‚úì Suppression de {len(files)} fichiers de test...")
        
        for file in files:
            filepath = os.path.join(output_dir, file)
            try:
                os.remove(filepath)
            except Exception as e:
                print(f"‚úó Erreur suppression {file}: {e}")
    
    # Supprimer le fichier d'historique de test
    history_file = "qr_history.json"
    if os.path.exists(history_file):
        try:
            os.remove(history_file)
            print("‚úì Fichier d'historique supprim√©")
        except Exception as e:
            print(f"‚úó Erreur suppression historique: {e}")
    
    print()

def main():
    """Fonction principale de test"""
    print("üß™ TESTS DU G√âN√âRATEUR DE QR CODES UNIQUES")
    print("=" * 50)
    print()
    
    try:
        # Ex√©cuter tous les tests
        test_basic_generation()
        test_all_methods()
        test_batch_generation()
        test_uniqueness()
        test_statistics()
        test_custom_parameters()
        test_edge_cases()
        run_performance_test()
        
        print("üéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
        print()
        
        # Demander si on veut nettoyer
        response = input("Voulez-vous supprimer les fichiers de test? (o/n): ").lower()
        if response in ['o', 'oui', 'y', 'yes']:
            cleanup_test_files()
        else:
            print("‚úì Fichiers de test conserv√©s dans le dossier 'generated_qr'")
        
    except AssertionError as e:
        print(f"‚ùå √âCHEC DU TEST: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"üí• ERREUR INATTENDUE: {e}")
        sys.exit(1)
    
    print()
    print("‚úÖ Tests termin√©s avec succ√®s!")

if __name__ == "__main__":
    main()